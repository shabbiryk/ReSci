{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/shabb/Project/Resci/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/shabb/Project/Resci/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BigNumber, providers, utils } from 'ethers';\nimport { hashSync } from 'bcryptjs';\nimport { PrivateKey } from '@textile/hub';\n\nvar generateMessageForEntropy = function generateMessageForEntropy(ethereum_address, application_name) {\n  return 'The Ethereum address used by this application is: \\n' + '\\n' + ethereum_address;\n};\n\nvar getSigner = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, signer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (window.ethereum) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('Ethereum is not connected. Please download Metamask from https://metamask.io/download.html');\n\n          case 2:\n            console.debug('Initializing web3 provider...');\n            provider = new providers.Web3Provider(window.ethereum);\n            signer = provider.getSigner();\n            return _context.abrupt(\"return\", signer);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getSigner() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var getProvider = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var provider;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (window.ethereum) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error('Ethereum is not connected. Please download Metamask from https://metamask.io/download.html');\n\n          case 2:\n            console.debug('Initializing web3 provider...');\n            window.ethereum.enable();\n            provider = new providers.Web3Provider(window.ethereum);\n            return _context2.abrupt(\"return\", provider);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getProvider() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getAddressAndSigner = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var signer, accounts, address;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getSigner();\n\n          case 2:\n            signer = _context3.sent;\n            _context3.next = 5;\n            return window.ethereum.request({\n              method: 'eth_requestAccounts'\n            });\n\n          case 5:\n            accounts = _context3.sent;\n\n            if (!(accounts.length === 0)) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new Error('No account is provided. Please provide an account to this application.');\n\n          case 8:\n            address = accounts[0];\n            return _context3.abrupt(\"return\", {\n              address: address,\n              signer: signer\n            });\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getAddressAndSigner() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport var generateSignature = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var metamask, secret, message, signedText, hash, seed;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getAddressAndSigner();\n\n          case 2:\n            metamask = _context4.sent;\n            // avoid sending the raw secret by hashing it first\n            secret = hashSync(\"Password\", 10);\n            message = generateMessageForEntropy(metamask.address, 'cermaic demo');\n            _context4.next = 7;\n            return metamask.signer.signMessage(message);\n\n          case 7:\n            signedText = _context4.sent;\n            hash = utils.keccak256(signedText);\n            seed = hash // @ts-ignore\n            .replace('0x', '') // @ts-ignore\n            .match(/.{2}/g).map(function (hexNoPrefix) {\n              return BigNumber.from('0x' + hexNoPrefix).toNumber();\n            });\n            return _context4.abrupt(\"return\", {\n              seed: seed,\n              metamask: metamask\n            });\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function generateSignature() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getMetamaskIdentity = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var metamask, secret, message, signedText, hash, array, identity;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return getAddressAndSigner();\n\n          case 2:\n            metamask = _context5.sent;\n            // avoid sending the raw secret by hashing it first\n            secret = hashSync(\"Password\", 10);\n            message = generateMessageForEntropy(metamask.address, 'cermaic demo');\n            _context5.next = 7;\n            return metamask.signer.signMessage(message);\n\n          case 7:\n            signedText = _context5.sent;\n            hash = utils.keccak256(signedText);\n            array = hash // @ts-ignore\n            .replace('0x', '') // @ts-ignore\n            .match(/.{2}/g).map(function (hexNoPrefix) {\n              return BigNumber.from('0x' + hexNoPrefix).toNumber();\n            });\n\n            if (!(array.length !== 32)) {\n              _context5.next = 12;\n              break;\n            }\n\n            throw new Error('Hash of signature is not the correct size! Something went wrong!');\n\n          case 12:\n            identity = PrivateKey.fromRawEd25519Seed(Uint8Array.from(array));\n            console.log(identity.toString()); // Your app can now use this identity for generating a user Mailbox, Threads, Buckets, etc\n\n            return _context5.abrupt(\"return\", identity);\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getMetamaskIdentity() {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/shabb/Project/Resci/lib/signerconnect.js"],"names":["BigNumber","providers","utils","hashSync","PrivateKey","generateMessageForEntropy","ethereum_address","application_name","getSigner","window","ethereum","Error","console","debug","provider","Web3Provider","signer","getProvider","enable","getAddressAndSigner","request","method","accounts","length","address","generateSignature","metamask","secret","message","signMessage","signedText","hash","keccak256","seed","replace","match","map","hexNoPrefix","from","toNumber","getMetamaskIdentity","array","identity","fromRawEd25519Seed","Uint8Array","log","toString"],"mappings":"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","sourcesContent":["import { BigNumber, providers, utils } from 'ethers'\nimport { hashSync } from 'bcryptjs'\nimport { PrivateKey } from '@textile/hub'\n\nconst generateMessageForEntropy = (ethereum_address, application_name) => {\n    return (\n      'The Ethereum address used by this application is: \\n' +\n      '\\n' +\n      ethereum_address\n    );\n}\n\nconst getSigner = async () => {\n    if (!window.ethereum) {\n        throw new Error(\n            'Ethereum is not connected. Please download Metamask from https://metamask.io/download.html'\n        );\n    }\n\n    console.debug('Initializing web3 provider...');\n    const provider = new providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    return signer\n}\n\nexport const getProvider = async () => {\n    if (!window.ethereum) {\n        throw new Error(\n            'Ethereum is not connected. Please download Metamask from https://metamask.io/download.html'\n        );\n    }\n\n    console.debug('Initializing web3 provider...');\n    window.ethereum.enable()\n    const provider = new providers.Web3Provider(window.ethereum);\n    return provider\n}\n\nconst getAddressAndSigner = async() => {\n    const signer = await getSigner()\n    // @ts-ignore\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    if (accounts.length === 0) {\n        throw new Error('No account is provided. Please provide an account to this application.');\n    }\n    const address = accounts[0];\n    return {address, signer}\n}\n\nexport const generateSignature = async () => {\n    const metamask = await getAddressAndSigner()\n    // avoid sending the raw secret by hashing it first\n    const secret = hashSync(\"Password\", 10)\n    const message = generateMessageForEntropy(metamask.address, 'cermaic demo')\n    const signedText = await metamask.signer.signMessage(message);\n    const hash = utils.keccak256(signedText);\n    const seed = hash\n        // @ts-ignore\n        .replace('0x', '')\n        // @ts-ignore\n        .match(/.{2}/g)\n        .map((hexNoPrefix) => BigNumber.from('0x' + hexNoPrefix).toNumber())\n    return {seed, metamask}\n}\n\nexport const getMetamaskIdentity = async () => {\n    const metamask = await getAddressAndSigner()\n    // avoid sending the raw secret by hashing it first\n    const secret = hashSync(\"Password\", 10)\n    const message = generateMessageForEntropy(metamask.address, 'cermaic demo')\n    const signedText = await metamask.signer.signMessage(message);\n    const hash = utils.keccak256(signedText);\n    const array = hash\n        // @ts-ignore\n        .replace('0x', '')\n        // @ts-ignore\n        .match(/.{2}/g)\n        .map((hexNoPrefix) => BigNumber.from('0x' + hexNoPrefix).toNumber())\n\n    if (array.length !== 32) {\n        throw new Error('Hash of signature is not the correct size! Something went wrong!');\n    }\n    const identity = PrivateKey.fromRawEd25519Seed(Uint8Array.from(array))\n    console.log(identity.toString())\n\n    // Your app can now use this identity for generating a user Mailbox, Threads, Buckets, etc\n    return identity\n  }\n"]},"metadata":{},"sourceType":"module"}
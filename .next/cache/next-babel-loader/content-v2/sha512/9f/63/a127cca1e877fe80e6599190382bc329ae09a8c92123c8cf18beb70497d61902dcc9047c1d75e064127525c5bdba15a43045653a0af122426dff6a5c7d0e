{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shabb\\\\Project\\\\Resci\\\\components\\\\MyDropzone.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { Buckets } from '@textile/hub';\nimport { getMetamaskIdentity } from '../lib/signerconnect';\nimport { Card, Text, Row, Col, Loading } from '@geist-ui/react';\nimport { Upload, Meh } from '@geist-ui/react-icons';\nimport Form from './Form';\nimport Private from \"./Private\";\n\nclass MyDropzone extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ipfsGateway\", 'https://hub.textile.io');\n\n    _defineProperty(this, \"keyInfo\", {\n      key: 'bxch3ikjx6yg2m4ewyeussjeuoy'\n    });\n\n    _defineProperty(this, \"keyInfoOptions\", {\n      debug: true\n    });\n\n    _defineProperty(this, \"state\", {\n      isLoading: true,\n      submitSuccess: false,\n      files: [],\n      index: {\n        author: '',\n        date: 0,\n        paths: [],\n        loadingMessage: \"loading\"\n      },\n      input_file: null,\n      title: null,\n      authors: null\n    });\n\n    _defineProperty(this, \"getIdentity\", async () => {\n      try {\n        return getMetamaskIdentity();\n      } catch (e) {\n        console.log(\"Couldn't connect to metamask\");\n      }\n    });\n\n    _defineProperty(this, \"getBucketKey\", async () => {\n      if (!this.state.identity) {\n        throw new Error('Identity not set');\n      }\n\n      const buckets = await Buckets.withKeyInfo(this.keyInfo, this.keyInfoOptions); // Authorize the user and your insecure keys with getToken\n\n      await buckets.getToken(this.state.identity);\n      const buck = await buckets.getOrCreate('io.textile.dropzone');\n\n      if (!buck.root) {\n        throw new Error('Failed to open bucket');\n      }\n\n      return {\n        buckets: buckets,\n        bucketKey: buck.root.key\n      };\n    });\n\n    _defineProperty(this, \"getBucketLinks\", async () => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key');\n        return;\n      }\n\n      const links = await this.state.buckets.links(this.state.bucketKey);\n      this.setState(_objectSpread({}, links));\n    });\n\n    _defineProperty(this, \"storeIndex\", async index => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key');\n        return;\n      }\n\n      const buf = Buffer.from(JSON.stringify(index, null, 2));\n      const path = `index.json`;\n      await this.state.buckets.pushPath(this.state.bucketKey, path, buf);\n    });\n\n    _defineProperty(this, \"initIndex\", async () => {\n      if (!this.state.identity) {\n        console.error('Identity not set');\n        return;\n      } // this will be converted to JSON, this is author metadata\n\n\n      const index = {\n        author: this.state.identity.public.toString(),\n        date: new Date().getTime(),\n        paths: []\n      };\n      await this.storeIndex(index);\n      return index;\n    });\n\n    _defineProperty(this, \"filelistFromIndex\", async index => {\n      this.setState({\n        loadingMessage: \"fetching filelist\"\n      });\n\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key');\n        return;\n      } // get file paths from index.paths array\n\n\n      for (let path of index.paths) {\n        console.log(path);\n        const metadata = await this.state.buckets.pullPath(this.state.bucketKey, path);\n        console.log(await this.state.buckets.links(this.state.bucketKey));\n        const {\n          value\n        } = await metadata.next();\n        let str = \"\";\n\n        for (var i = 0; i < value.length; i++) {\n          str += String.fromCharCode(parseInt(value[i]));\n        }\n\n        const json = JSON.parse(str);\n        const file = json.original;\n        this.setState({\n          files: [...this.state.files, {\n            src: `${this.ipfsGateway}/ipfs/${file.cid}`,\n            key: file.name,\n            authors: file.authors,\n            title: file.title\n          }]\n        });\n      }\n    });\n\n    _defineProperty(this, \"getJSONFromBucket\", async path => {\n      const data = this.state.buckets.pullPath(this.state.bucketKey, path);\n      const {\n        value\n      } = await data.next();\n      let str = \"\";\n\n      for (var i = 0; i < value.length; i++) {\n        str += String.fromCharCode(parseInt(value[i]));\n      }\n\n      const json_data = JSON.parse(str);\n      return json_data;\n    });\n\n    _defineProperty(this, \"getFileIndex\", async () => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key');\n        return;\n      }\n\n      try {\n        const index = await this.getJSONFromBucket('index.json');\n        return index;\n      } catch (error) {\n        console.log(error);\n        console.log(\"\\n\\ninitializing INDEX\\n\\n\");\n        const index = await this.initIndex(); // await this.initPublicGallery()\n\n        return index;\n      }\n    });\n\n    _defineProperty(this, \"insertFile\", async (file, path) => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        throw new Error('No bucket client or root key');\n      }\n\n      const buckets = this.state.buckets;\n      return await buckets.pushPath(this.state.bucketKey, path, file.stream());\n    });\n\n    _defineProperty(this, \"processAndStore\", async (file, path, name) => {\n      const location = `${path}${name}`;\n      const raw = await this.insertFile(file, location);\n      const metadata = {\n        cid: raw.path.cid.toString(),\n        name: name,\n        path: location\n      };\n      return metadata;\n    });\n\n    _defineProperty(this, \"handleNewFile\", async file => {\n      this.setState({\n        loadingMessage: \"handling file\"\n      });\n      console.log(\"handleNewFile()\");\n\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key');\n        return;\n      }\n\n      const fileSchema = {};\n      const now = new Date().getTime();\n      fileSchema['date'] = now;\n      fileSchema['name'] = `${file.name}`;\n      fileSchema['title'] = this.state.title;\n      fileSchema['authors'] = this.state.authors;\n      const filename = `${now}_${file.name}`;\n      this.setState({\n        loadingMessage: \"pushing file to bucket\"\n      });\n      fileSchema['original'] = await this.processAndStore(file, 'originals/', filename);\n      const metadata = Buffer.from(JSON.stringify(fileSchema, null, 2));\n      const metaname = `${now}_${file.name}.json`;\n      const path = `metadata/${metaname}`;\n      this.setState({\n        loadingMessage: \"pushing metadata\"\n      });\n      await this.state.buckets.pushPath(this.state.bucketKey, path, metadata);\n      const fileOnBucket = fileSchema['original'];\n      this.setState({\n        index: _objectSpread(_objectSpread({}, this.state.index), {}, {\n          paths: [...this.state.index.paths, path]\n        }),\n        files: [...this.state.files, {\n          src: `${this.ipfsGateway}/ipfs/${fileOnBucket.cid}`,\n          key: fileOnBucket.name,\n          authors: this.state.authors,\n          title: this.state.title\n        }]\n      });\n      this.setState({\n        loadingMessage: null\n      });\n    });\n\n    _defineProperty(this, \"onDrop\", async acceptedFiles => {\n      for (const file of acceptedFiles) {\n        //setting a simple format date_filename\n        this.setState({\n          input_file: file\n        });\n      }\n    });\n\n    _defineProperty(this, \"submitHandler\", async () => {\n      if (this.state.input_file == null) {\n        console.error(\"\\n\\nNo file\\n\\n\");\n      } else {\n        await this.handleNewFile(this.state.input_file);\n        await this.storeIndex(this.state.index);\n        this.setState({\n          input_file: null,\n          title: null,\n          authors: null\n        });\n        this.storeIndex(this.state.index);\n        this.setState({\n          submitSuccess: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"titleHandler\", e => {\n      this.setState({\n        title: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"authorsHandler\", e => {\n      this.setState({\n        authors: e.target.value\n      });\n    });\n  }\n\n  async componentDidMount() {\n    this.setState({\n      loadingMessage: \"waiting for metamask\"\n    });\n    const identity = await this.getIdentity();\n    this.setState({\n      identity: identity\n    });\n    this.setState({\n      loadingMessage: \"fetching data\"\n    });\n    const {\n      bucketKey,\n      buckets\n    } = await this.getBucketKey();\n    this.setState({\n      buckets: buckets,\n      bucketKey: bucketKey\n    });\n    this.setState({\n      loadingMessage: \"fetching data\"\n    });\n    await this.getBucketLinks();\n    this.setState({\n      loadingMessage: \"fetching data\"\n    });\n    const index = await this.getFileIndex();\n\n    if (index) {\n      await this.filelistFromIndex(index);\n      this.setState({\n        index: index,\n        isLoading: false\n      });\n    } else {\n      console.log(\"No index\");\n    }\n\n    this.setState({\n      loadingMessage: null\n    });\n  }\n  /**\n   * Textile Bucket api init\n   */\n\n\n  formatBucketData() {\n    var res = [];\n\n    for (var f in this.state.files) {\n      res.push({\n        \"Name\": f.title,\n        \"Authors\": [f.authors],\n        \"Tags\": [\"Brains\", \"fMRI\"],\n        \"BIDSVersion\": \"1.0.2\"\n      });\n    }\n\n    const myData = {\n      mockData: res\n    };\n    return myData;\n  }\n\n  render() {\n    const bucketData = this.formatBucketData();\n    return __jsx(React.Fragment, null, __jsx(Dropzone, {\n      onDrop: this.onDrop,\n      maxSize: 20000000,\n      multiple: true,\n      disabled: !(this.state.loadingMessage === null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 13\n      }\n    }, ({\n      getRootProps,\n      getInputProps\n    }) => __jsx(\"div\", _extends({\n      className: \"dropzone\"\n    }, getRootProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }\n    }), __jsx(\"input\", _extends({}, getInputProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 19\n      }\n    })), __jsx(Card, {\n      hoverable: true,\n      width: \"100%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 23\n      }\n    }, this.state.loadingMessage === null && __jsx(React.Fragment, null, __jsx(Row, {\n      gap: 0.8,\n      justify: \"center\",\n      style: {\n        marginBottom: '15px',\n        marginTop: '15px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 25\n      }\n    }, __jsx(Col, {\n      span: 1.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 27\n      }\n    }, __jsx(Upload, {\n      size: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 31\n      }\n    }))), __jsx(Row, {\n      gap: 0.8,\n      align: \"center\",\n      style: {\n        marginBottom: '15px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 25\n      }\n    }, __jsx(Col, {\n      span: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 27\n      }\n    }, __jsx(Text, {\n      type: \"primary\",\n      align: \"center\",\n      medium: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 31\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 75\n      }\n    }, \"Drag and Drop\")), __jsx(Text, {\n      type: \"primary\",\n      align: \"center\",\n      medium: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 31\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 75\n      }\n    }, \"or\")), __jsx(Text, {\n      type: \"primary\",\n      align: \"center\",\n      medium: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 31\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 75\n      }\n    }, \"Click to Select Files\"))))), !(this.state.loadingMessage === null) && __jsx(React.Fragment, null, __jsx(Row, {\n      gap: 0.8,\n      justify: \"center\",\n      style: {\n        marginBottom: '15px',\n        marginTop: '15px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 25\n      }\n    }, __jsx(Col, {\n      span: 1.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 27\n      }\n    }, __jsx(Meh, {\n      size: 40,\n      color: \"grey\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 31\n      }\n    }))), __jsx(Row, {\n      gap: 0.8,\n      align: \"center\",\n      style: {\n        marginBottom: '15px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 25\n      }\n    }, __jsx(Col, {\n      span: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 27\n      }\n    }, __jsx(Text, {\n      type: \"primary\",\n      align: \"center\",\n      medium: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 31\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 75\n      }\n    }, \"Please Wait\")))), __jsx(Row, {\n      gap: 0.8,\n      align: \"center\",\n      style: {\n        marginBottom: '15px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 25\n      }\n    }, __jsx(Col, {\n      span: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 27\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 33\n      }\n    }, __jsx(Row, {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 37\n      }\n    }, __jsx(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 41\n      }\n    }, this.state.loadingMessage))))))))), __jsx(Form, {\n      loading: this.state.loadingMessage,\n      title: this.state.title,\n      titleHandler: this.titleHandler,\n      authors: this.state.authors,\n      authorsHandler: this.authorsHandler,\n      submitHandler: this.submitHandler,\n      submitSuccess: this.state.submitSuccess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }\n    }), __jsx(Private, {\n      myData: bucketData,\n      accessData: bucketData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default MyDropzone;","map":{"version":3,"sources":["C:/Users/shabb/Project/Resci/components/MyDropzone.js"],"names":["React","Dropzone","Buckets","getMetamaskIdentity","Card","Text","Row","Col","Loading","Upload","Meh","Form","Private","MyDropzone","Component","key","debug","isLoading","submitSuccess","files","index","author","date","paths","loadingMessage","input_file","title","authors","e","console","log","state","identity","Error","buckets","withKeyInfo","keyInfo","keyInfoOptions","getToken","buck","getOrCreate","root","bucketKey","error","links","setState","buf","Buffer","from","JSON","stringify","path","pushPath","public","toString","Date","getTime","storeIndex","metadata","pullPath","value","next","str","i","length","String","fromCharCode","parseInt","json","parse","file","original","src","ipfsGateway","cid","name","data","json_data","getJSONFromBucket","initIndex","stream","location","raw","insertFile","fileSchema","now","filename","processAndStore","metaname","fileOnBucket","acceptedFiles","handleNewFile","target","componentDidMount","getIdentity","getBucketKey","getBucketLinks","getFileIndex","filelistFromIndex","formatBucketData","res","f","push","myData","mockData","render","bucketData","onDrop","getRootProps","getInputProps","marginBottom","marginTop","padding","titleHandler","authorsHandler","submitHandler"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport { Buckets } from '@textile/hub'\nimport {getMetamaskIdentity} from '../lib/signerconnect'\nimport { Card,Text, Row, Col, Loading } from '@geist-ui/react';\nimport {Upload, Meh} from '@geist-ui/react-icons'\nimport Form from './Form';\nimport Private from \"./Private\"\n\nclass MyDropzone extends React.Component {\n\n    ipfsGateway = 'https://hub.textile.io'\n    keyInfo = {\n      key: 'bxch3ikjx6yg2m4ewyeussjeuoy'\n    }\n    keyInfoOptions = {\n      debug: true\n    }\n    state = {\n        isLoading: true,\n        submitSuccess: false,\n        files: [],\n        index: {\n          author: '',\n          date: 0,\n          paths: [],\n          loadingMessage: \"loading\",\n      },\n      input_file: null,\n      title: null,\n      authors: null,\n    }\n\n    async componentDidMount() {\n      this.setState({loadingMessage: \"waiting for metamask\"})\n      const identity = await this.getIdentity()\n      this.setState({\n        identity: identity\n      })\n\n      this.setState({loadingMessage: \"fetching data\"})\n      const {bucketKey, buckets} = await this.getBucketKey()\n      this.setState({\n        buckets: buckets,\n        bucketKey: bucketKey\n      })\n\n      this.setState({loadingMessage: \"fetching data\"})\n      await this.getBucketLinks()\n\n      this.setState({loadingMessage: \"fetching data\"})\n      const index = await this.getFileIndex()\n      if (index) {\n        await this.filelistFromIndex(index)\n        this.setState({\n          index: index,\n          isLoading: false\n        })\n      }\n      else {\n          console.log(\"No index\")\n      }\n\n      this.setState({loadingMessage: null})\n    }\n\n    /**\n     * Textile Bucket api init\n     */\n    getIdentity = async () => {\n      try {\n        return getMetamaskIdentity()\n      }\n      catch (e) {\n        console.log(\"Couldn't connect to metamask\")\n      }\n    }\n\n    getBucketKey = async () => {\n      if (!this.state.identity) {\n        throw new Error('Identity not set')\n      }\n      const buckets = await Buckets.withKeyInfo(this.keyInfo, this.keyInfoOptions)\n      // Authorize the user and your insecure keys with getToken\n      await buckets.getToken(this.state.identity)\n\n      const buck = await buckets.getOrCreate('io.textile.dropzone')\n      if (!buck.root) {\n        throw new Error('Failed to open bucket')\n      }\n      return {buckets: buckets, bucketKey: buck.root.key};\n    }\n\n    getBucketLinks = async () => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key')\n        return\n      }\n      const links = await this.state.buckets.links(this.state.bucketKey)\n      this.setState({\n        ...links\n      })\n    }\n\n    /**\n     * Storing and retrieval from bucket\n     * store metadata json into bucket\n     */\n    storeIndex = async (index) => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key')\n        return\n      }\n      const buf = Buffer.from(JSON.stringify(index, null, 2))\n      const path = `index.json`\n      await this.state.buckets.pushPath(this.state.bucketKey, path, buf)\n    }\n\n    initIndex = async () => {\n      if (!this.state.identity) {\n        console.error('Identity not set')\n        return\n      }\n      // this will be converted to JSON, this is author metadata\n      const index = {\n        author: this.state.identity.public.toString(),\n        date: (new Date()).getTime(),\n        paths: []\n      }\n\n      await this.storeIndex(index)\n      return index\n    }\n\n    filelistFromIndex = async (index) => {\n        this.setState({loadingMessage: \"fetching filelist\"})\n        if (!this.state.buckets || !this.state.bucketKey) {\n            console.error('No bucket client or root key')\n            return\n        }\n\n        // get file paths from index.paths array\n        for (let path of index.paths) {\n            console.log(path)\n            const metadata = await this.state.buckets.pullPath(this.state.bucketKey, path)\n            console.log(await this.state.buckets.links(this.state.bucketKey))\n            const { value } = await metadata.next();\n            let str = \"\";\n            for (var i = 0; i < value.length; i++) {\n                str += String.fromCharCode(parseInt(value[i]));\n            }\n            const json = JSON.parse(str)\n            const file = json.original\n            this.setState({\n              files: [\n                ...this.state.files,\n                {\n                  src:`${this.ipfsGateway}/ipfs/${file.cid}`,\n                  key: file.name,\n                  authors: file.authors,\n                  title: file.title,\n                }\n              ]\n            })\n        }\n    }\n\n    getJSONFromBucket = async (path) => {\n        const data = this.state.buckets.pullPath(this.state.bucketKey, path)\n        const { value } = await data.next();\n        let str = \"\";\n        for (var i = 0; i < value.length; i++) {\n          str += String.fromCharCode(parseInt(value[i]));\n        }\n        const json_data = JSON.parse(str)\n        return json_data\n    }\n\n    getFileIndex = async () => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key')\n        return\n      }\n      try {\n        const index = await this.getJSONFromBucket('index.json')\n        return index\n      } catch (error) {\n        console.log(error)\n        console.log(\"\\n\\ninitializing INDEX\\n\\n\")\n        const index = await this.initIndex()\n        // await this.initPublicGallery()\n        return index\n      }\n    }\n\n    /**\n     * File handling, on drop and setting metadata, uploading to bucket etc.\n     */\n    insertFile = async (file, path) => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        throw new Error('No bucket client or root key')\n      }\n      const buckets = this.state.buckets\n      return await buckets.pushPath(this.state.bucketKey, path, file.stream())\n    }\n\n    processAndStore = async (file, path, name) => {\n      const location = `${path}${name}`\n      const raw = await this.insertFile(file, location)\n      const metadata = {\n        cid: raw.path.cid.toString(),\n        name: name,\n        path: location,\n      }\n      return metadata\n    }\n\n    handleNewFile = async (file) => {\n        this.setState({loadingMessage: \"handling file\"})\n        console.log(\"handleNewFile()\")\n        if (!this.state.buckets || !this.state.bucketKey) {\n            console.error('No bucket client or root key')\n            return\n        }\n        const fileSchema = {}\n        const now = new Date().getTime()\n\n        fileSchema['date'] = now\n        fileSchema['name'] = `${file.name}`\n        fileSchema['title'] = this.state.title\n        fileSchema['authors'] = this.state.authors\n        \n        const filename = `${now}_${file.name}`\n        this.setState({loadingMessage: \"pushing file to bucket\"})\n        fileSchema['original'] = await this.processAndStore(file, 'originals/', filename)\n\n        const metadata = Buffer.from(JSON.stringify(fileSchema, null, 2))\n        const metaname = `${now}_${file.name}.json`\n        const path = `metadata/${metaname}`\n        this.setState({loadingMessage: \"pushing metadata\"})\n        await this.state.buckets.pushPath(this.state.bucketKey, path, metadata)\n        const fileOnBucket = fileSchema['original']\n\n        this.setState({\n            index: {\n                ...this.state.index,\n                paths: [...this.state.index.paths, path]\n            },\n            files: [\n                ...this.state.files,\n                {\n                    src: `${this.ipfsGateway}/ipfs/${fileOnBucket.cid}`,\n                    key: fileOnBucket.name,\n                    authors: this.state.authors,\n                    title: this.state.title,\n                }\n            ]\n        })\n\n        this.setState({loadingMessage: null})\n    }\n\n    onDrop = async (acceptedFiles) => {\n        for (const file of acceptedFiles) {\n          //setting a simple format date_filename\n          this.setState({input_file: file})\n        }\n    }\n\n    submitHandler = async () => {\n        if(this.state.input_file == null) {console.error(\"\\n\\nNo file\\n\\n\")}\n        else{\n            await this.handleNewFile(this.state.input_file)\n\n            await this.storeIndex(this.state.index)\n\n            this.setState({\n                input_file: null,\n                title: null,\n                authors: null,\n            })\n\n            this.storeIndex(this.state.index)\n\n            this.setState({\n              submitSuccess: true\n            })\n            \n        }\n    }\n\n    titleHandler = (e) => {\n        this.setState({title: e.target.value})\n    }\n\n    authorsHandler = (e) => {\n        this.setState({authors: e.target.value})\n    }\n\n    formatBucketData() {\n        var res = []\n        for (var f in this.state.files) {\n            res.push({\n                \"Name\": f.title,\n                \"Authors\": [f.authors,],\n                \"Tags\": [\"Brains\", \"fMRI\"],\n                \"BIDSVersion\": \"1.0.2\",\n            })\n        }\n\n        const myData = {\n            mockData: res,\n        }\n\n        return myData\n    }\n\n    render(){\n      const bucketData = this.formatBucketData()\n      return (\n          <>\n            <Dropzone\n              onDrop={this.onDrop}\n              maxSize={20000000}\n              multiple={true}\n              disabled={!(this.state.loadingMessage === null)}\n              >\n              {({getRootProps, getInputProps}) => (\n                <div className=\"dropzone\" {...getRootProps()}>\n                  <input {...getInputProps()} />\n                      <Card hoverable width=\"100%\">\n                        {(this.state.loadingMessage === null) &&\n                        <>\n                        <Row gap={0.8} justify=\"center\" style={{ marginBottom: '15px', marginTop: '15px'}}>\n                          <Col span={1.5}>\n                              <Upload size={40}/>\n                          </Col>\n                        </Row>\n                        <Row gap={0.8} align=\"center\" style={{ marginBottom: '15px' }}>\n                          <Col span={30}>\n                              <Text type=\"primary\" align=\"center\"  medium><b>Drag and Drop</b></Text>\n                              <Text type=\"primary\" align=\"center\"  medium><b>or</b></Text>\n                              <Text type=\"primary\" align=\"center\"  medium><b>Click to Select Files</b></Text>\n                          </Col>\n                        </Row>\n                        </>}\n                        {!(this.state.loadingMessage === null) &&\n                        <>\n                        <Row gap={0.8} justify=\"center\" style={{ marginBottom: '15px', marginTop: '15px'}}>\n                          <Col span={1.5}>\n                              <Meh size={40} color=\"grey\"/>\n                          </Col>\n                        </Row>\n                        <Row gap={0.8} align=\"center\" style={{ marginBottom: '15px' }}>\n                          <Col span={30}>\n                              <Text type=\"primary\" align=\"center\"  medium><b>Please Wait</b></Text>\n                          </Col>\n                        </Row>\n                        <Row gap={0.8} align=\"center\" style={{ marginBottom: '15px' }}>\n                          <Col span={30}>\n                                <div>\n                                    <Row style={{ padding: '10px'}}>\n                                        <Loading>{this.state.loadingMessage}</Loading>\n                                    </Row>\n                                </div>\n                          </Col>\n                        </Row>\n                        </>}\n                      </Card>\n                </div>\n              )}\n            </Dropzone>\n            <Form\n                loading={this.state.loadingMessage}\n                title={this.state.title}\n                titleHandler={this.titleHandler}\n                authors={this.state.authors}\n                authorsHandler={this.authorsHandler}\n                submitHandler={this.submitHandler}\n                submitSuccess={this.state.submitSuccess}/>\n\n            <Private myData={bucketData} accessData={bucketData} />            \n          </>\n      )\n  }\n}\n\nexport default MyDropzone;\n"]},"metadata":{},"sourceType":"module"}
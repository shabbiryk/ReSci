{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shabb\\\\Project\\\\Resci\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { GeistProvider, CssBaseline } from '@geist-ui/react';\nimport { generateSignature } from \"../lib/signerconnect\";\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: provider,\n    1: setProvider\n  } = useState(null);\n\n  const connectUser = async () => {\n    const {\n      seed,\n      metamask\n    } = await generateSignature();\n    setProvider(metamask);\n  };\n\n  pageProps['connectUser'] = connectUser;\n  return __jsx(GeistProvider, {\n    theme: {\n      type: 'light'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    provider: provider,\n    connectUser: connectUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/shabb/Project/Resci/pages/_app.js"],"names":["React","useState","GeistProvider","CssBaseline","generateSignature","MyApp","Component","pageProps","provider","setProvider","connectUser","seed","metamask","type"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,iBAA3C;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AAEvC,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BR,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMS,WAAW,GAAG,YAAY;AAC9B,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAmB,MAAMR,iBAAiB,EAAhD;AACAK,IAAAA,WAAW,CAACG,QAAD,CAAX;AACD,GAHD;;AAKAL,EAAAA,SAAS,CAAC,aAAD,CAAT,GAA2BG,WAA3B;AAEA,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAeN,SAAf;AAA0B,IAAA,QAAQ,EAAEC,QAApC;AAA8C,IAAA,WAAW,EAAEE,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAMD;;AACD,eAAeL,KAAf","sourcesContent":["import React, {useState} from 'react'\nimport { GeistProvider, CssBaseline } from '@geist-ui/react'\nimport {generateSignature} from \"../lib/signerconnect\"\n\nfunction MyApp({ Component, pageProps }) {\n\n  const [provider, setProvider] = useState(null);\n\n  const connectUser = async () => {\n    const {seed, metamask} = await generateSignature();\n    setProvider(metamask)\n  }\n  \n  pageProps['connectUser'] = connectUser\n  \n  return (\n    <GeistProvider theme={{ type: 'light' }}>\n      <CssBaseline />\n      <Component {...pageProps} provider={provider} connectUser={connectUser}/>\n    </GeistProvider>\n  )\n}\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}